"use strict";(self.webpackChunk_lage_run_docs=self.webpackChunk_lage_run_docs||[]).push([[269],{5318:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>f});var n=t(7378);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=n.createContext({}),d=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},c=function(e){var a=d(e.components);return n.createElement(l.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),u=i,f=p["".concat(l,".").concat(u)]||p[u]||m[u]||o;return t?n.createElement(f,r(r({ref:a},c),{},{components:t})):n.createElement(f,r({ref:a},c))}));function f(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var d=2;d<o;d++)r[d]=t[d];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8746:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=t(5773),i=(t(7378),t(5318));const o={sidebar_position:3,title:"3. Scoping by packages"},r=void 0,s={unversionedId:"Tutorial/scopes",id:"Tutorial/scopes",title:"3. Scoping by packages",description:"By examining the target graph, lage can understand which some targets that are not affected by a particular change being proposed in a pull request. In that case lage has a few CLI arguments that controls which target to run.",source:"@site/docs/Tutorial/scopes.md",sourceDirName:"Tutorial",slug:"/Tutorial/scopes",permalink:"/lage/docs/Tutorial/scopes",draft:!1,editUrl:"https://github.com/microsoft/lage/docs/Tutorial/scopes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"3. Scoping by packages"},sidebar:"tutorialSidebar",previous:{title:"2. Pipeline",permalink:"/lage/docs/Tutorial/pipeline"},next:{title:"4. Local Caching",permalink:"/lage/docs/Tutorial/cache"}},l={},d=[{value:"Scoped builds with all its dependents",id:"scoped-builds-with-all-its-dependents",level:2},{value:"Scoped builds with no dependent &amp; their dependencies",id:"scoped-builds-with-no-dependent--their-dependencies",level:2}],c={toc:d};function p(e){let{components:a,...t}=e;return(0,i.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"By examining the ",(0,i.kt)("a",{parentName:"p",href:"/lage/docs/Introduction#how-does-lage-schedule-tasks"},"target graph"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," can understand which some targets that are not affected by a particular change being proposed in a pull request. In that case ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," has a few CLI arguments that controls which target to run."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"A target is an unit of execution in the ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," graph. Think of it as a tuple of ",(0,i.kt)("inlineCode",{parentName:"p"},"[package, task]"),".")),(0,i.kt)("h2",{id:"scoped-builds-with-all-its-dependents"},"Scoped builds with all its dependents"),(0,i.kt)("p",null,"By default, ",(0,i.kt)("inlineCode",{parentName:"p"},"lage"),' runs tasks on all affected packages within a scope. Packages that changed will affect downstream consumers of the "scope". In this example, the ',(0,i.kt)("inlineCode",{parentName:"p"},"scope")," is set as ",(0,i.kt)("inlineCode",{parentName:"p"},"a-common-library")," - all of its transitive dependents (consumers of the ",(0,i.kt)("inlineCode",{parentName:"p"},"a-common-library"),' package) will also have their "build" script be called.   '),(0,i.kt)("div",{className:"shiki-twoslash-fragment"},(0,i.kt)("pre",{parentName:"div",className:"shiki min-light",style:{backgroundColor:"#ffffff",color:"#24292eff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope a-common-library"))))),(0,i.kt)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope a-common-library")))))),(0,i.kt)("p",null,"You can use wild card character: ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),". This is particularly helpful when packages are named by group or by scope. For example, ",(0,i.kt)("inlineCode",{parentName:"p"},"components-*")," would match ",(0,i.kt)("inlineCode",{parentName:"p"},"components-foo")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"components-bar")," packages."),(0,i.kt)("div",{className:"shiki-twoslash-fragment"},(0,i.kt)("pre",{parentName:"div",className:"shiki min-light",style:{backgroundColor:"#ffffff",color:"#24292eff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope components-*"))))),(0,i.kt)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope components-*")))))),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"npm has a concept of ",(0,i.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/v8/using-npm/scope"},"@-scoped packages")," in the package names. This describes a kind of grouping by an organization as defined by the npm spec. It is a ",(0,i.kt)("em",{parentName:"p"},"different")," concept than the ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," scope.")),(0,i.kt)("p",null,"Speaking of @-scopes. We found that typing the @-scopes when specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," scoped runs is a kind of ",(0,i.kt)("a",{parentName:"p",href:"https://sre.google/sre-book/eliminating-toil/"},"toil")," as a command line argument. So, ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," will accept bare package names like this:"),(0,i.kt)("div",{className:"shiki-twoslash-fragment"},(0,i.kt)("pre",{parentName:"div",className:"shiki min-light",style:{backgroundColor:"#ffffff",color:"#24292eff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"# Given that there is a package named: @myorg/wonderful-library, we can match it this way:")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope wonderful-library"))))),(0,i.kt)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"# Given that there is a package named: @myorg/wonderful-library, we can match it this way:")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope wonderful-library")))))),(0,i.kt)("h2",{id:"scoped-builds-with-no-dependent--their-dependencies"},"Scoped builds with no dependent & their dependencies"),(0,i.kt)("p",null,"If you simply want to run all targets up to a certain scope, this is how you can achieve it:"),(0,i.kt)("div",{className:"shiki-twoslash-fragment"},(0,i.kt)("pre",{parentName:"div",className:"shiki min-light",style:{backgroundColor:"#ffffff",color:"#24292eff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## v2")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope build-tools --no-dependents")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}})),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## v1")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope build-tools --no-deps"))))),(0,i.kt)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## v2")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope build-tools --no-dependents")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}})),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## v1")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --scope build-tools --no-deps")))))),(0,i.kt)("p",null,"In fact, this is so useful that ",(0,i.kt)("inlineCode",{parentName:"p"},"lage")," has a special syntactic sugar for it:"),(0,i.kt)("div",{className:"shiki-twoslash-fragment"},(0,i.kt)("pre",{parentName:"div",className:"shiki min-light",style:{backgroundColor:"#ffffff",color:"#24292eff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## syntactic sugar for --scope build-tools --no-dependents")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --to build-tools"))))),(0,i.kt)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,i.kt)("div",{parentName:"pre",className:"code-container"},(0,i.kt)("code",{parentName:"div"},(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"## syntactic sugar for --scope build-tools --no-dependents")),(0,i.kt)("div",{parentName:"code",className:"line"},(0,i.kt)("span",{parentName:"div",style:{color:"undefined"}},"$ lage build --to build-tools")))))))}p.isMDXComponent=!0}}]);